diff --git a/trad_lidar_detector/src/perception_node.cpp b/trad_lidar_detector/src/perception_node.cpp
index 20469c2..46f2edd 100644
--- a/trad_lidar_detector/src/perception_node.cpp
+++ b/trad_lidar_detector/src/perception_node.cpp
@@ -169,15 +169,25 @@ private:
         pcl::PointCloud<pcl::PointXYZI> cloud;
         pcl::fromROSMsg(transformed_cloud, cloud);

+        /* ========================================
+         * Median Filter
+         * ========================================*/
+        pcl::PointCloud<pcl::PointXYZI>::Ptr median_input_cloud(new pcl::PointCloud<pcl::PointXYZI>(cloud));
+        pcl::PointCloud<pcl::PointXYZI>::Ptr median_filtered(new pcl::PointCloud<pcl::PointXYZI>);
+        pcl::MedianFilter<pcl::PointXYZI> median_filter;
+        median_filter.setInputCloud(median_input_cloud);
+        median_filter.setWindowSize(median_filter_size);
+        // median_filter.setMaxAllowedMovement
+        median_filter.filter(*median_filtered);
+
         /* ========================================
          * VOXEL GRID
          * ========================================*/
-        pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_ptr(new pcl::PointCloud<pcl::PointXYZI>(cloud));
+        // pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_ptr(new pcl::PointCloud<pcl::PointXYZI>(cloud));
         pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_voxel_filtered(new pcl::PointCloud<pcl::PointXYZI>());
         pcl::VoxelGrid<pcl::PointXYZI> voxel_filter;
-        voxel_filter.setInputCloud(cloud_ptr);
+        voxel_filter.setInputCloud(median_filtered);
         voxel_filter.setLeafSize(voxel_leaf_size, voxel_leaf_size, voxel_leaf_size);
-        // voxel_filter.set
         voxel_filter.filter(*cloud_voxel_filtered);

         /* ========================================
@@ -193,27 +203,17 @@ private:
         // crop.setKeepOrganized(true);
         crop.filter(xyz_filtered_cloud);

-        /* ========================================
-         * Median Filter
-         * ========================================*/
-        pcl::PointCloud<pcl::PointXYZI>::Ptr median_input_cloud(new pcl::PointCloud<pcl::PointXYZI>(xyz_filtered_cloud));
-        pcl::PointCloud<pcl::PointXYZI>::Ptr median_filtered(new pcl::PointCloud<pcl::PointXYZI>);
-        pcl::MedianFilter<pcl::PointXYZI> median_filter;
-        median_filter.setInputCloud(median_input_cloud);
-        median_filter.setWindowSize(median_filter_size);
-        median_filter.filter(*median_filtered);
-
-        auto stop = std::chrono::high_resolution_clock::now();
-        auto t_ms = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
-        RCLCPP_INFO(get_logger(), "Filt time (msec): %ld", t_ms.count());
+        auto stop1 = std::chrono::high_resolution_clock::now();
+        auto t_ms1 = std::chrono::duration_cast<std::chrono::milliseconds>(stop1 - start);
+        RCLCPP_INFO(get_logger(), "Filt time (msec): %ld", t_ms1.count());

         /* ========================================
          * STATISTICAL OUTLIER REMOVAL
          * ========================================*/
-        // pcl::PointCloud<pcl::PointXYZI>::Ptr sor_input_cloud(new pcl::PointCloud<pcl::PointXYZI>(xyz_filtered_cloud));
+        pcl::PointCloud<pcl::PointXYZI>::Ptr sor_input_cloud(new pcl::PointCloud<pcl::PointXYZI>(xyz_filtered_cloud));
         pcl::PointCloud<pcl::PointXYZI>::Ptr sor_cloud_filtered(new pcl::PointCloud<pcl::PointXYZI>);
         pcl::StatisticalOutlierRemoval<pcl::PointXYZI> sor;
-        sor.setInputCloud(median_filtered);
+        sor.setInputCloud(sor_input_cloud);
         sor.setMeanK(50);
         sor.setStddevMulThresh(1.0);
         // sor.setKeepOrganized(true);
@@ -349,7 +349,7 @@ private:
          * CONVERT PointCloud2 PCL->ROS, PUBLISH CLOUD
          * ========================================*/
         this->publishPointCloud(voxel_grid_pub_, *cloud_voxel_filtered);
-        this->publishPointCloud(plane_pub_, *cloud_f);
+        this->publishPointCloud(plane_pub_, *median_filtered);
         this->publishPointCloud(euclidean_pub_, *clusters[0]);
         this->publishPointCloud(stat_pub_, *sor_cloud_filtered);
